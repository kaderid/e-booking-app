version: '3.8'

services:
  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15
    container_name: ebooking_db_staging
    environment:
      POSTGRES_DB: e_booking_staging
      POSTGRES_USER: booking_user
      POSTGRES_PASSWORD: booking_pass
    ports:
      - "5433:5432"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
    networks:
      - ebooking-staging-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U booking_user -d e_booking_staging"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Spring Boot
  backend:
    build:
      context: ./e-booking-app/backend/ebooking
      dockerfile: Dockerfile
    image: ebooking/backend:latest
    container_name: ebooking_backend_staging
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/e_booking_staging
      SPRING_DATASOURCE_USERNAME: booking_user
      SPRING_DATASOURCE_PASSWORD: booking_pass
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SERVER_PORT: 8080
    ports:
      - "8081:8080"
    networks:
      - ebooking-staging-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Frontend Angular
  frontend:
    build:
      context: ./e-booking-app/frontend
      dockerfile: Dockerfile
    image: ebooking/frontend:latest
    container_name: ebooking_frontend_staging
    depends_on:
      - backend
    ports:
      - "4201:80"
    networks:
      - ebooking-staging-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

networks:
  ebooking-staging-network:
    driver: bridge

volumes:
  postgres_staging_data:
